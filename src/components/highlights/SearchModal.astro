---
import Button from '@components/Button.astro';
import { getAuthors, getSources, getTags } from '@helpers/highlights-api-helper';

const authors = await getAuthors().then(authors =>
  authors.sort((a, b) => {
    if (a.firstName.toUpperCase() < b.firstName.toUpperCase()) {
      return -1;
    } else {
      return 1;
    }
  })
);

const sources = await getSources().then(sources =>
  sources.sort((a, b) => {
    if (a.title.toUpperCase() < b.title.toUpperCase()) {
      return -1;
    } else {
      return 1;
    }
  })
);

const tags = await getTags().then(tags =>
  tags.sort((a, b) => {
    if (a.name.toUpperCase() < b.name.toUpperCase()) {
      return -1;
    } else {
      return 1;
    }
  })
);
---

<dialog>
  <header>
    <h3>Search for highlights</h3>
    <button id="close-modal-btn"></button>
  </header>
  <form>
    <div>
      <label for="authors">Author</label>
      <select id="authors" name="author">
        {authors.map(({ id, firstName, lastName }) => <option value={id}>{`${firstName} ${lastName}`}</option>)}
      </select>
    </div>
    <div>
      <label for="sources">Source</label>
      <select id="sources" name="source">
        {sources.map(({ id, title }) => <option value={id}>{title}</option>)}
      </select>
    </div>
    <div>
      <label for="tags">Tag</label>
      <select id="tags" name="tag">
        {tags.map(({ id, name }) => <option value={id}>{name}</option>)}
      </select>
    </div>
    <menu>
      <Button text="Reset" type="reset" />
      <Button text="Submit" type="submit" value="submit" isCta={true} />
      <!-- <button formmethod="dialog" type="submit" class="cta-btn" value="submit">Submit</button> -->
    </menu>
  </form>
</dialog>

<style>
  dialog {
    margin: 20% auto;
    width: 80%;
    max-width: 48rem;
    background-color: var(--color-bg-secondary);
    padding: 1rem;
    border: 0;
    border-radius: 0.5rem;
  }

  dialog::backdrop {
    backdrop-filter: brightness(80%) blur(3px);
  }

  header {
    display: flex;
    justify-content: space-between;
  }

  h3 {
    color: var(--color-txt-secondary);
    font-size: var(--font-size-large);
    font-weight: var(--font-weight-bolder);
    line-height: var(--line-height-medium);
    margin-top: 0;
  }

  button {
    margin: 0;
  }

  #close-modal-btn {
    background-color: inherit;
    background-image: url('/icons/nav-closed.svg');
    border: 0;
    height: 2rem;
    padding: 0;
    width: 2rem;
  }

  form {
    display: flex;
    flex-direction: column;

    & label {
      color: var(--color-txt-secondary);
    }
  }

  menu {
    display: flex;
    gap: 1rem;
    margin: 0;
    padding: 0;
    justify-content: right;

    & button[type='reset'] {
      border: 0;
      color: var(--color-txt-default);
      padding-left: 0.2rem;
      padding-right: 0.2rem;
    }
  }

  @media (min-width: 768px) {
    dialog {
      margin: 10% auto;
    }
  }
</style>

<script>
  const closeModalButton = document.getElementById('close-modal-btn');
  const searchModal = document.querySelector('dialog') as HTMLDialogElement;

  closeModalButton?.addEventListener('click', () => searchModal?.close());

  // Handle form submission
  searchModal.addEventListener('close', () => {
    console.log(searchModal.returnValue);
  });
</script>
