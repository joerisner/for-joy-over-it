---
import BaseLayout from '@layouts/BaseLayout.astro';
import { getAuthors, getSources, getTags } from '@helpers/highlights-api-helper';

const authors = await getAuthors();
const sources = await getSources();
const tags = await getTags();
---

<BaseLayout title={'Highlights'}>
  <section>
    <menu>
      <button id="random-highlight-btn">Enlighten me, Boon</button>
      <button class="cta-btn" id="search-btn">Search</button>
    </menu>
    <dialog>
      <header>
        <h3>Search for highlights</h3>
        <button id="close-modal-btn"></button>
      </header>
      <form>
        <div>
          <label for="authors">Author</label>
          <select id="authors" name="author">
            {authors.map(({ id, firstName, lastName }) => <option value={id}>{`${firstName} ${lastName}`}</option>)}
          </select>
        </div>
        <div>
          <label for="sources">Source</label>
          <select id="sources" name="source">
            {sources.map(({ id, title }) => <option value={id}>{title}</option>)}
          </select>
        </div>
        <div>
          <label for="tags">Tag</label>
          <select id="tags" name="tag">
            {tags.map(({ id, name }) => <option value={id}>{name}</option>)}
          </select>
        </div>
        <menu>
          <button type="reset">Reset</button>
          <button type="submit" class="cta-btn" value="submit">Submit</button>
          <!-- <button formmethod="dialog" type="submit" class="cta-btn" value="submit">Submit</button> -->
        </menu>
      </form>
    </dialog>
    <figure>
      <blockquote id="quotation"></blockquote>
      <figcaption>
        <p id="author"></p>
        <cite id="source"></cite>
      </figcaption>
    </figure>
  </section>
</BaseLayout>

<style>
  section {
    align-items: center;
    display: flex;
    flex-direction: column;
    gap: 3rem;
    justify-content: center;
  }

  menu {
    display: flex;
    gap: 1rem;
    margin: 0;
    padding: 0;
  }

  button {
    background-color: inherit;
    border: 2px solid var(--color-txt-secondary);
    border-radius: 0.45rem;
    color: var(--color-txt-secondary);
    cursor: pointer;
    font-size: var(--font-size-default);
    margin: 0 auto;
    padding: 0.4rem 1rem;
  }

  button:hover {
    filter: brightness(80%);
  }

  .cta-btn {
    background-color: var(--color-txt-secondary);
    color: var(--color-bg-default);
  }

  dialog {
    margin: 20% auto;
    width: 80%;
    max-width: 48rem;
    background-color: var(--color-bg-secondary);
    padding: 1rem;
    border: 0;
    border-radius: 0.5rem;

    & h3 {
      color: var(--color-txt-secondary);
      font-size: var(--font-size-large);
      font-weight: var(--font-weight-bolder);
      line-height: var(--line-height-medium);
      margin-top: 0;
    }

    & button {
      margin: 0;
    }

    & #close-modal-btn {
      background-image: url('/icons/nav-closed.svg');
      border: 0;
      height: 2rem;
      padding: 0;
      width: 2rem;
    }

    form {
      display: flex;
      flex-direction: column;

      & label {
        color: var(--color-txt-secondary);
      }
    }

    & header {
      display: flex;
      justify-content: space-between;
    }

    & menu {
      justify-content: right;

      & button[type='reset'] {
        border: 0;
        color: var(--color-txt-default);
        padding-left: 0.2rem;
        padding-right: 0.2rem;
      }
    }
  }

  dialog::backdrop {
    backdrop-filter: brightness(80%) blur(3px);
  }

  figure,
  figcaption,
  p {
    margin: 0;
  }

  figure {
    width: 100%;
  }

  #quotation {
    margin: 0 0 1.5rem 0;
    font-size: var(--font-size-large);
    font-style: italic;
  }

  figcaption {
    text-align: right;
  }

  cite {
    font-style: normal;
  }

  @media (min-width: 768px) {
    dialog {
      margin: 10% auto;
    }
  }
</style>

<script>
  import { getRandomHighlight } from '@helpers/highlights-api-helper';

  // ---- Random highlight behavior ----
  const insertRandomHighlight = async () => {
    const { author, body, source } = await getRandomHighlight();
    document.getElementById('quotation')!.textContent = body;
    document.getElementById('author')!.textContent = author;
    document.getElementById('source')!.textContent = source;
  };

  const randomHighlightButton = document.getElementById('random-highlight-btn');
  randomHighlightButton?.addEventListener('click', insertRandomHighlight);
  window.addEventListener('load', insertRandomHighlight);

  // ---- Search behavior ----
  const searchButton = document.getElementById('search-btn');
  const searchModal = document.querySelector('dialog') as HTMLDialogElement;
  const closeModalButton = document.getElementById('close-modal-btn');

  // Open and close modal
  searchButton?.addEventListener('click', () => searchModal?.showModal());
  closeModalButton?.addEventListener('click', () => searchModal?.close());

  // Handle form submission
  searchModal.addEventListener('close', () => {
    console.log(searchModal.returnValue);
  });
</script>
